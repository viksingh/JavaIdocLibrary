			line = "";
			List<SegmentMetaData> segMetaDataList = new ArrayList<SegmentMetaData>();
			for (String lineCurrent : fileData) {

				if (lineCurrent.substring(0, 7).equals("CONTROL")
						|| lineCurrent.substring(0, 4).equals("DATA")) {
					String tempLineString = lineCurrent.substring(10);
					// Control Record
					if (tempLineString.substring(0, 8).equals("EDI_DC40")) {
						String EDI_DC40 = tempLineString;
						String idocType = EDI_DC40.substring(39, 68).trim();
						String cimType = EDI_DC40.substring(69, 98).trim();
						InitialContext initialcontext;
						try {
							initialcontext = new InitialContext();
							String sapRelease = moduleContext
									.getContextData("SAPRelease");
							String sourceJRA = moduleContext
									.getContextData("SourceJRA");

							ConnectionFactory connectionFactory = (ConnectionFactory) initialcontext
									.lookup((new StringBuilder()).append(
											"deployedAdapters/").append(
											sourceJRA).append("/shareable/")
											.append(sourceJRA).toString());
							JRAIDocFactory idocFactory = JRAIDoc
									.getIDocFactory();
							IDocRepository idocRepository = idocFactory
									.getIDocRepository(connectionFactory);
							IDocSegmentMetaData rootMetaData = idocRepository
									.getRootSegmentMetaData(idocType, cimType,
											sapRelease, sapRelease);
							if (rootMetaData != null) {
								IDocSegmentMetaData[] listSegments = rootMetaData
										.getChildren();
								;
								int i = 0;
								for (IDocSegmentMetaData currSeg : listSegments) {
									if (currSeg != null) {
										i++;
										SegmentMetaData segMetaData = new SegmentMetaData();
										segMetaData.setSegType(currSeg
												.getType());
										segMetaData.setSegDef(currSeg
												.getDefinition());
										segMetaDataList.add(segMetaData);
									}
								} // forloop
							} // rootData
						} // endtry

						catch (NamingException e) {
							e.printStackTrace();
						} catch (IDocException e) {
							e.printStackTrace();
						}
					} // control record

					// For first line, just add. Subsequent lines add newline in
					// between
					if (outputData == "") {
						outputData = tempLineString;
					} else {
						String lineToReplace = "";
						String segName = tempLineString.substring(0, 29);
						String remaingData = tempLineString.substring(30);
						for (SegmentMetaData segMetaDataTemp : segMetaDataList) {
							if (segMetaDataTemp.getSegType().trim()
									.toUpperCase().equals(
											segName.trim().toUpperCase())) {
								String tempSegDef = segMetaDataTemp.getSegDef();
								lineToReplace = padRight(tempSegDef, 30)
										+ remaingData;
								outputData = outputData + NEW_LINE
										+ lineToReplace;
								break;
							}
						}
					} // end else
				}
			} // for loop
		} // has multiple lines
